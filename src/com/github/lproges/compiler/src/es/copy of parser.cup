package com.github.lproges.compiler.es;

import com.github.lproges.compiler.Attr;
import com.github.lproges.compiler.Err;
import com.github.lproges.compiler.Nodo;
import java.util.LinkedList;


parser code {: 
    LinkedList<Err> errores = new LinkedList<>();
    LinkedList<Nodo> nodos = new LinkedList<>();

    public LinkedList<Err> getErrores(){
        return errores;
    }
  
    public LinkedList<Nodo> getNodos(){
    	return nodos;
    }

    public void report_error(String message, Object info){
        Err e = new Err(message,null,Err.TIPO.SINTACTICO);

        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        getErrores().add(e);
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }
:};

action code{:

    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }
    void addNodo(Nodo nodo){
        parser.getNodos().add(nodo);
    }
    void addError(String msg,Object info,Err.TIPO tipo){
        parser.getErrores().add(new Err(msg,info,tipo));
    }
:}


/****************************************************************************************/
terminal        String      KW_INT,KW_STRING,KW_BOOLEAN,KW_FLOAT,KW_CHAR,INT,STRING,BOOLEAN,
                            FLOAT,CHAR,ID,COMA,PCOMA,EQUAL,DEQUAL,LTHAN,BTHAN,LETHAN,BETHAN,
                            NOT,OR,AND,PUNTO,NEQUAL,LP,RP,LB,RB,MINUS,PLUS,MULTI,DIV,PUBLIC,
                            PRIVATE,SELECT,CASE,EXIT,DEFAULT,WHILE,FOR,IF,ELSEIF,KW_NORMAL,
                            KW_INCLUDE,INCLUDE_STRING,INCLUDE_CHAR
                            ;
non terminal    Attr        begin,input,stmt_list,stmt,id,int,string,boolean,float,char,def_var,
                            id_list,tipo,expr,include_list,include,def_list,def,main_def,main_body,
                            var_def
                            ;
/****************************************************************************************/
begin       ::= input 	{:System.out.println("[Compiler] - Compiled...");:}
                ;
// *********************************************************************************
// Input - Contenido de la entrada
// *********************************************************************************
input       ::= include_list
				|include_list def_list
				|def_list
                |
                ;
// *********************************************************************************
// Incluir libreriras o archivos...
// *********************************************************************************
include_list	::=	include_list include
					|include
					;
include 		::= KW_INCLUDE INCLUDE_STRING PCOMA
					|KW_INCLUDE INCLUDE_CHAR PCOMA
					;
// *********************************************************************************
// Definiciones alto nivel...
// *********************************************************************************

def_list	::=	def_list:l def:x
				{:

				:}
				|def:x
				{:RESULT = x;:}
				;

def 		::= main_def:x 	{:RESULT = x;:}
				//|class_def
				|error 		{:RESULT = new Attr();:}
				;
// DEFINICION METODO PRINCIPAL
main_def	::=	KW_NORMAL id:x LP RP LB main_body:b RB
				{:
					Attr attr = new Attr();
					String nombre = x.getString("val");

					if(nombre.equals("principal")){
						String tres =	"int main(){" + "\n"
										+ 	"\t" + b.getString("tres")
										+ 	"\t" + "return 0;" + "\n"
										+ "}";
						attr.set("main",true);
						attr.set("id",x);
						attr.set("tres",tres);
					} else {
						addError("Se esperaba el m√©todo principal...",x.get("info"),Err.TIPO.SINTACTICO);
					}

					RESULT = attr;
				:}
				;

main_body 	::= stmt_list
				|
				;

// DEFINICION CLASE

// *********************************************************************************
// Sentencias
// *********************************************************************************
stmt_list   ::= stmt_list:l stmt:x
                {:
                :}
                |stmt:x
                {:
                :}
                ;
stmt        ::= var_def
                ;



// DEFINICION DE VARIABLES
var_def 	::= tipo:t id_list:l PCOMA
				{:

				:}
                ;
tipo        ::= KW_CHAR         {:RESULT = new Attr("tipo","char");:}
                |KW_BOOLEAN     {:RESULT = new Attr("tipo","boolean");:}
                |KW_STRING      {:RESULT = new Attr("tipo","string");:}
                |KW_INT         {:RESULT = new Attr("tipo","int");:}
                |KW_FLOAT       {:RESULT = new Attr("tipo","float");:}
                |error          {:RESULT = new Attr();:}
                ;

id_list     ::= id_list COMA id
                |id
                ;

// *********************************************************************************
// Datos primitivos
// *********************************************************************************
char        ::= CHAR:x   
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","char");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                ;

float       ::= FLOAT:x   
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","float");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                ;

boolean     ::= BOOLEAN:x   
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","boolean");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                ;
string      ::= STRING:x     
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","string");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                ;
int         ::= INT:x       
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","int");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                    ;
id          ::= ID:x        
                {:
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("id",true);
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                :}
                ;




