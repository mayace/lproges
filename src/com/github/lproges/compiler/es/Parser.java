
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 30 02:02:54 CST 2013
//----------------------------------------------------

package com.github.lproges.compiler.es;

import com.github.lproges.compiler.Attr;
import com.github.lproges.compiler.Err;
import com.github.lproges.compiler.Nodo;
import java.util.LinkedList;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 30 02:02:54 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\002" +
    "\000\002\020\004\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\022\004\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\011\000\002\025" +
    "\003\000\002\025\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\026\005\000\002\026\007\000" +
    "\002\026\010\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\015\005\000\002\015\003\000\002\030\004" +
    "\000\002\030\003\000\002\027\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\013\003\000\002\012" +
    "\003\000\002\011\003\000\002\010\003\000\002\007\003" +
    "\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\012\002\ufffc\003\011\056\012\057\005\001" +
    "\002\000\012\002\ufffa\003\ufffa\056\ufffa\057\ufffa\001\002" +
    "\000\006\060\103\061\102\001\002\000\010\002\ufff6\003" +
    "\ufff6\056\ufff6\001\002\000\004\002\101\001\002\000\010" +
    "\002\ufffd\003\011\056\012\001\002\000\010\002\ufff4\003" +
    "\ufff4\056\ufff4\001\002\000\004\016\021\001\002\000\004" +
    "\002\001\001\002\000\010\002\ufff5\003\ufff5\056\ufff5\001" +
    "\002\000\012\002\uffff\003\011\056\012\057\005\001\002" +
    "\000\012\002\ufffb\003\ufffb\056\ufffb\057\ufffb\001\002\000" +
    "\010\002\ufffe\003\011\056\012\001\002\000\010\002\ufff7" +
    "\003\ufff7\056\ufff7\001\002\000\016\017\uffd4\020\uffd4\021" +
    "\uffd4\034\uffd4\064\uffd4\065\uffd4\001\002\000\004\034\023" +
    "\001\002\000\004\035\024\001\002\000\004\036\025\001" +
    "\002\000\022\003\034\004\037\005\033\006\035\007\041" +
    "\010\026\037\ufff1\063\030\001\002\000\004\016\uffea\001" +
    "\002\000\022\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\037\uffef\063\uffef\001\002\000\004\062\067\001" +
    "\002\000\022\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\037\uffee\063\uffee\001\002\000\004\037\066\001" +
    "\002\000\004\016\uffe8\001\002\000\004\016\uffe5\001\002" +
    "\000\004\016\uffe9\001\002\000\004\016\021\001\002\000" +
    "\004\016\uffe7\001\002\000\022\003\034\004\037\005\033" +
    "\006\035\007\041\010\026\037\ufff2\063\030\001\002\000" +
    "\004\016\uffe6\001\002\000\022\003\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\037\ufff0\063\ufff0\001\002\000" +
    "\010\017\045\020\047\021\046\001\002\000\010\017\uffe3" +
    "\020\uffe3\021\uffe3\001\002\000\004\016\021\001\002\000" +
    "\016\011\051\012\055\013\054\014\062\015\063\016\021" +
    "\001\002\000\022\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\037\uffed\063\uffed\001\002\000\006\020\uffde" +
    "\064\uffde\001\002\000\006\020\uffd5\064\uffd5\001\002\000" +
    "\006\020\uffda\064\uffda\001\002\000\006\020\uffdd\064\uffdd" +
    "\001\002\000\006\020\uffd7\064\uffd7\001\002\000\006\020" +
    "\uffd6\064\uffd6\001\002\000\006\020\uffdc\064\uffdc\001\002" +
    "\000\006\020\uffdf\064\uffdf\001\002\000\004\020\064\001" +
    "\002\000\006\020\uffdb\064\uffdb\001\002\000\006\020\uffd8" +
    "\064\uffd8\001\002\000\006\020\uffd9\064\uffd9\001\002\000" +
    "\022\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\037\uffec\063\uffec\001\002\000\010\017\uffe4\020\uffe4\021" +
    "\uffe4\001\002\000\010\002\ufff3\003\ufff3\056\ufff3\001\002" +
    "\000\016\003\034\004\037\005\033\006\035\007\041\010" +
    "\026\001\002\000\004\016\021\001\002\000\004\065\074" +
    "\001\002\000\006\020\uffe1\065\uffe1\001\002\000\006\020" +
    "\077\065\074\001\002\000\016\011\051\012\055\013\054" +
    "\014\062\015\063\016\021\001\002\000\004\064\076\001" +
    "\002\000\006\020\uffe0\065\uffe0\001\002\000\022\003\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\037\uffeb\063" +
    "\uffeb\001\002\000\006\020\uffe2\065\uffe2\001\002\000\004" +
    "\002\000\001\002\000\004\020\105\001\002\000\004\020" +
    "\104\001\002\000\012\002\ufff9\003\ufff9\056\ufff9\057\ufff9" +
    "\001\002\000\012\002\ufff8\003\ufff8\056\ufff8\057\ufff8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\020\002\006\003\012\020\014\021\003\022" +
    "\007\023\005\024\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\017\024\013\001\001\000\002\001\001\000\004\006\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\015\022\016\023\005\024\013\001\001\000\002\001\001" +
    "\000\006\023\017\024\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\037\005\026\016\035\025\031\026" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\043" +
    "\015\042\001\001\000\002\001\001\000\010\005\041\016" +
    "\035\026\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\064\001" +
    "\001\000\020\006\051\007\056\010\055\011\060\012\052" +
    "\013\047\017\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\067\001\001\000\004" +
    "\006\070\001\001\000\006\027\071\030\072\001\001\000" +
    "\002\001\001\000\004\027\077\001\001\000\020\006\051" +
    "\007\056\010\055\011\060\012\052\013\047\017\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    LinkedList<Err> errores = new LinkedList<>();
    LinkedList<Nodo> nodos = new LinkedList<>();

    public LinkedList<Err> getErrores(){
        return errores;
    }
  
    public LinkedList<Nodo> getNodos(){
    	return nodos;
    }

    public void report_error(String message, Object info){
        Err e = new Err(message,null,Err.TIPO.SINTACTICO);

        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        getErrores().add(e);
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }
    void addNodo(Nodo nodo){
        parser.getNodos().add(nodo);
    }
    void addError(String msg,Object info,Err.TIPO tipo){
        parser.getErrores().add(new Err(msg,info,tipo));
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("id",true);
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","int");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","string");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","boolean");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // float ::= FLOAT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","float");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // char ::= CHAR 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","char");
                    a.set("info",CUP$Parser$stack.peek());
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= float 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= char 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dimension ::= OQ expr CQ 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dimension_list ::= dimension 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Attr attr = new Attr();
						ArrayList<Attr> list = new ArrayList<>();

						list.add(x);

						attr.set("list",list);

						RESULT = attr;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dimension_list ::= dimension_list dimension 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getList("list").add(x);
						RESULT = x;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id_list ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	Attr attr = new Attr();
                	ArrayList<Attr> list = new ArrayList<>();
                	list.add(x);
                	attr.set("list",list);

                	RESULT = attr;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // id_list ::= id_list COMA id 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= KW_FLOAT 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= KW_INT 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= KW_CHAR 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_def ::= KW_ARRAY KW_OF tipo id dimension_list PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_attr = new Attr();

					l_attr.set("tipo",t);
					l_attr.set("id",x);
					l_attr.set("dimension",l.get("list"));

					Nodo left = new Nodo(l_attr,false);

					attr.set("nodo",new Nodo("declaracion_array",left,null));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_def ::= tipo id_list EQUAL expr PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_attr = new Attr();

					l_attr.set("tipo",t);
					l_attr.set("list",l.getList("list"));

					Nodo left = new Nodo(l_attr,false);
					Nodo right = e.getNodo("nodo");

					attr.set("nodo",new Nodo("declaracion",left,right));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_def ::= tipo id_list PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_attr = new Attr();

					l_attr.set("tipo",t);
					l_attr.set("list",l.getList("list"));

					Nodo left = new Nodo(l_attr,false);
					Nodo right = null;

					attr.set("nodo",new Nodo("declaracion",left,right));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= var_def 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt_list ::= stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	RESULT = x;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	Attr attr = new Attr();

                	attr.set("nodo",new Nodo("stmt",l.getNodo("nodo"),x.getNodo("nodo")));

                	RESULT = attr;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // main_body ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // main_body ::= stmt_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main_def ::= KW_NORMAL id LP RP LB main_body RB 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr b = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();

					attr.set("nodo",new Nodo("main",b.getNodo("nodo"),null));
					
					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_def",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def ::= main_def 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					addNodo(x.getNodo("nodo"));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_list ::= def 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_list ::= def_list def 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // include ::= KW_INCLUDE INCLUDE_CHAR PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // include ::= KW_INCLUDE INCLUDE_STRING PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // include_list ::= include 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // include_list ::= include_list include 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // input ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // input ::= def_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= include_list def_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= include_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;
		System.out.println("[Compiler] - Compiled...");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

