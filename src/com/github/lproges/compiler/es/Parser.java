
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 01 22:40:34 CST 2014
//----------------------------------------------------

package com.github.lproges.compiler.es;

import com.github.lproges.compiler.Attr;
import com.github.lproges.compiler.Err;
import com.github.lproges.compiler.Nodo;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 01 22:40:34 CST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\002" +
    "\000\002\020\004\000\002\020\003\000\002\021\005\000" +
    "\002\021\005\000\002\022\004\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\037\002\000\002\031" +
    "\013\000\002\036\003\000\002\036\002\000\002\033\005" +
    "\000\002\033\003\000\002\035\004\000\002\025\003\000" +
    "\002\025\002\000\002\004\004\000\002\004\003\000\002" +
    "\005\003\000\002\026\005\000\002\026\007\000\002\026" +
    "\010\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\015\005\000\002\015\003\000\002" +
    "\030\004\000\002\030\003\000\002\027\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\013\003\000" +
    "\002\012\003\000\002\011\003\000\002\010\003\000\002" +
    "\007\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\024\002\ufffc\003\013\004\021\005\012\006" +
    "\015\007\022\010\006\056\014\057\005\001\002\000\024" +
    "\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\056\ufffa\057\ufffa\001\002\000\006\060\114\061\113" +
    "\001\002\000\004\016\uffe4\001\002\000\022\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\056\ufff6" +
    "\001\002\000\004\002\112\001\002\000\022\002\ufffd\003" +
    "\013\004\021\005\012\006\015\007\022\010\006\056\014" +
    "\001\002\000\004\016\uffe2\001\002\000\024\002\ufff4\003" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\016\uffde" +
    "\056\ufff4\001\002\000\004\016\uffdf\001\002\000\004\016" +
    "\uffe3\001\002\000\004\002\001\001\002\000\022\002\ufff5" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\056" +
    "\ufff5\001\002\000\004\016\027\001\002\000\004\016\uffe1" +
    "\001\002\000\004\016\uffe0\001\002\000\024\002\uffff\003" +
    "\013\004\021\005\012\006\015\007\022\010\006\056\014" +
    "\057\005\001\002\000\024\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\056\ufffb\057\ufffb\001\002" +
    "\000\022\002\ufffe\003\013\004\021\005\012\006\015\007" +
    "\022\010\006\056\014\001\002\000\022\002\ufff7\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\056\ufff7\001" +
    "\002\000\020\017\uffcd\020\uffcd\021\uffcd\034\uffcd\035\uffcd" +
    "\064\uffcd\065\uffcd\001\002\000\004\034\031\001\002\000" +
    "\022\003\034\004\021\005\012\006\015\007\022\010\006" +
    "\035\ufff0\056\014\001\002\000\006\017\uffee\035\uffee\001" +
    "\002\000\004\035\042\001\002\000\004\016\uffde\001\002" +
    "\000\004\016\027\001\002\000\006\017\037\035\ufff1\001" +
    "\002\000\020\003\034\004\021\005\012\006\015\007\022" +
    "\010\006\056\014\001\002\000\006\017\uffef\035\uffef\001" +
    "\002\000\006\017\uffed\035\uffed\001\002\000\004\036\043" +
    "\001\002\000\024\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\037\ufff3\056\ufff3\063\ufff3\001\002\000\024" +
    "\003\034\004\021\005\012\006\015\007\022\010\006\037" +
    "\uffeb\056\014\063\046\001\002\000\024\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\037\uffe9\056\uffe9\063" +
    "\uffe9\001\002\000\004\062\100\001\002\000\024\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\037\uffe8\056" +
    "\uffe8\063\uffe8\001\002\000\004\037\077\001\002\000\004" +
    "\016\027\001\002\000\024\003\034\004\021\005\012\006" +
    "\015\007\022\010\006\037\uffec\056\014\063\046\001\002" +
    "\000\024\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\037\uffea\056\uffea\063\uffea\001\002\000\010\017\056" +
    "\020\060\021\057\001\002\000\010\017\uffdc\020\uffdc\021" +
    "\uffdc\001\002\000\004\016\027\001\002\000\016\011\061" +
    "\012\066\013\065\014\073\015\074\016\027\001\002\000" +
    "\024\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\037\uffe7\056\uffe7\063\uffe7\001\002\000\006\020\uffce\064" +
    "\uffce\001\002\000\006\020\uffd7\064\uffd7\001\002\000\006" +
    "\020\uffd3\064\uffd3\001\002\000\006\020\uffd6\064\uffd6\001" +
    "\002\000\006\020\uffd0\064\uffd0\001\002\000\006\020\uffcf" +
    "\064\uffcf\001\002\000\006\020\uffd8\064\uffd8\001\002\000" +
    "\006\020\uffd5\064\uffd5\001\002\000\004\020\075\001\002" +
    "\000\006\020\uffd4\064\uffd4\001\002\000\006\020\uffd1\064" +
    "\uffd1\001\002\000\006\020\uffd2\064\uffd2\001\002\000\024" +
    "\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\037" +
    "\uffe6\056\uffe6\063\uffe6\001\002\000\010\017\uffdd\020\uffdd" +
    "\021\uffdd\001\002\000\022\002\ufff2\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\056\ufff2\001\002\000\020" +
    "\003\034\004\021\005\012\006\015\007\022\010\006\056" +
    "\014\001\002\000\004\016\027\001\002\000\004\065\105" +
    "\001\002\000\006\020\uffda\065\uffda\001\002\000\006\020" +
    "\110\065\105\001\002\000\016\011\061\012\066\013\065" +
    "\014\073\015\074\016\027\001\002\000\004\064\107\001" +
    "\002\000\006\020\uffd9\065\uffd9\001\002\000\024\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\037\uffe5\056" +
    "\uffe5\063\uffe5\001\002\000\006\020\uffdb\065\uffdb\001\002" +
    "\000\004\002\000\001\002\000\004\020\116\001\002\000" +
    "\004\020\115\001\002\000\024\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\056\ufff9\057\ufff9\001" +
    "\002\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\056\ufff8\057\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\022\002\007\003\015\016\017\020\022\021" +
    "\003\022\010\023\006\031\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\017\023\025\031\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\017\021\023\022\024\023\006\031\016\001\001" +
    "\000\002\001\001\000\010\016\017\023\025\031\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\034\033\035\035\031\036\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\040\001\001\000\002\001\001\000\006\016\034\035" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\043\001\001\000\014\004\051\005" +
    "\044\016\050\025\047\026\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\054\015\053\001\001\000\010\005\052\016\050" +
    "\026\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\075\001\001\000\020\006\062" +
    "\007\066\010\067\011\071\012\063\013\061\017\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\100\001\001\000\004\006\101\001\001\000" +
    "\006\027\102\030\103\001\001\000\002\001\001\000\004" +
    "\027\110\001\001\000\020\006\062\007\066\010\067\011" +
    "\071\012\063\013\061\017\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    LinkedList<Err> errores = new LinkedList<>();
    LinkedList<Nodo> nodos = new LinkedList<>();

    public LinkedList<Err> getErrores(){
        return errores;
    }
  
    public LinkedList<Nodo> getNodos(){
    	return nodos;
    }

    public void report_error(String message, Object info){
        Err e = new Err(message,null,Err.TIPO.SINTACTICO);

        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        getErrores().add(e);
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


	
    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }
    void addNodo(Nodo nodo){
        parser.getNodos().add(nodo);
    }
    void addError(String msg,Object info,Err.TIPO tipo){
        parser.getErrores().add(new Err(msg,info,tipo));
    }

    Stack<String> scope_stack = new Stack<>();

    String getScope(){
    	String ret = "";
    	int i = 0;
    	for(String str : scope_stack){
    		if (i == 0){
    			ret = str;
    		} else {
    			ret += "." + str;
    		}
    		i++;
    	}
    	System.out.println(ret);
    	return ret;
    }

    void pushScope(String name,Object ... param_list){
    	String scope_str = name;

    	if(param_list != null && param_list.length > 0){
    		for(int i = 0; i<param_list.length; i++){
    			scope_str += (i == 0 ? "," : ".") + param_list[i];
    		}
    	}
    	scope_stack.push(scope_str);
    }

    String popScope(){
    	return scope_stack.pop();
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("id",true);
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,true));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","int");
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,false));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","string");
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,false));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","boolean");
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,false));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // float ::= FLOAT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","float");
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,false));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("float",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // char ::= CHAR 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("val",x);
                    a.set("tipo","char");
                    a.set("info",CUP$Parser$stack.peek());
                    a.set("nodo",new Nodo(a,false));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("char",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= float 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= char 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dimension ::= OQ expr CQ 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dimension_list ::= dimension 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Attr attr = new Attr();
						ArrayList<Attr> list = new ArrayList<>();

						list.add(x);

						attr.set("list",list);

						RESULT = attr;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dimension_list ::= dimension_list dimension 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.getList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dimension_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // id_list ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	Attr attr = new Attr();
                	ArrayList<Attr> list = new ArrayList<>();
                	list.add(x);
                	attr.set("list",list);

                	RESULT = attr;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // id_list ::= id_list COMA id 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					l.getList("list").add(x);
					RESULT = l;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo ::= KW_NORMAL 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","void");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= KW_FLOAT 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo ::= KW_INT 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= KW_CHAR 
            {
              Attr RESULT =null;
		RESULT = new Attr("val","char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_def ::= KW_ARRAY KW_OF tipo id dimension_list PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_attr = new Attr();

					l_attr.set("scope",getScope());
					l_attr.set("tipo",t);
					l_attr.set("id",x);
					l_attr.set("list",l.get("list"));

					Nodo left = new Nodo(new Attr("val",l_attr),false);

					attr.set("nodo",new Nodo("declaracion_array",left,null));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_def ::= tipo id_list EQUAL expr PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_attr = new Attr();

					l_attr.set("tipo",t);
					l_attr.set("list",l.getList("list"));

					Nodo left = new Nodo(new Attr("val",l_attr),false);
					Nodo right = e.getNodo("nodo");

					attr.set("nodo",new Nodo("declaracion",left,right));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_def ::= tipo id_list PCOMA 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					Attr attr = new Attr();
					Attr l_val = new Attr();

					l_val.set("scope",getScope());
					l_val.set("tipo",t);
					l_val.set("list",l.getList("list"));

					Nodo left = new Nodo(new Attr("val",l_val),false);
					Nodo right = null;

					attr.set("nodo",new Nodo("declaracion",left,right));

					RESULT = attr;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_def",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= var_def 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt_list ::= stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	RESULT = x;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                	Attr attr = new Attr();

                	attr.set("nodo",new Nodo("stmt",l.getNodo("nodo"),x.getNodo("nodo")));

                	RESULT = attr;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_body ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method_body ::= stmt_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // param ::= tipo id 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Attr attr = new Attr();

						attr.set("tipo",t);
						attr.set("id",x);
						RESULT = attr;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_list ::= param 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						Attr attr = new Attr();
						ArrayList<Attr> list = new ArrayList<>();
						String tipo_lista = x.getAttr("tipo").getString("val");
						list.add(x);
						attr.set("list",list);
						attr.set("tipo_list",tipo_lista);
						RESULT = attr;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param_list ::= param_list COMA param 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						l.set("tipo_list",l.getString("tipo_list") + "." + x.getAttr("tipo").getString("val"));
						l.getList("list").add(x);
						RESULT = l;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_param ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr("list",new ArrayList<Attr>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method_param ::= param_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_param",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_def ::= tipo id LP method_param RP LB NT$0 method_body RB 
            {
              Attr RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Attr) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr p = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr b = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					popScope();
					Attr attr = new Attr();
					Attr l_val = new Attr();

					l_val.set("scope",getScope());
					l_val.set("tipo",t);
					l_val.set("id",x);
					l_val.set("list",p.getList("list"));  
					l_val.set("tipo_list",p.getString("tipo_list"));

					Nodo left = new Nodo(new Attr("val",l_val),false);
					Nodo right = b.getNodo("nodo");

					attr.set("nodo",new Nodo("method",left,right));

					RESULT = attr;

				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_def",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              Attr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr p = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

													if(p.getString("tipo_list") == null){
														pushScope(x.getString("val"));
													} else {
														Object[] tipo_array = p.getString("tipo_list").split("\\.");
														pushScope(x.getString("val"),tipo_array);
													}
													
												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // def ::= error 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // def ::= method_def 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					addNodo(x.getNodo("nodo"));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // def_list ::= def 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def_list ::= def_list def 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("def_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // include ::= KW_INCLUDE INCLUDE_CHAR PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // include ::= KW_INCLUDE INCLUDE_STRING PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // include_list ::= include 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // include_list ::= include_list include 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("include_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // input ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // input ::= def_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= include_list def_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= include_list 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;
		System.err.println("Compiled...");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

