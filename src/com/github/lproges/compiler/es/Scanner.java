/* The following code was generated by JFlex 1.4.3 on 12/30/13 2:14 AM */

package com.github.lproges.compiler.es;

import com.github.lproges.compiler.Err;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.lang.StringBuilder;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/30/13 2:14 AM from the specification file
 * <tt>./src/es/scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCOMMENT = 4;
  public static final int YYSTRING = 2;
  public static final int YYINITIAL = 0;
  public static final int YYCHAR = 6;
  public static final int YYINCLUDE_CHAR = 10;
  public static final int YYINCLUDE_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\1\2\0\1\2\16\6\4\0\1\3\1\0\1\55"+
    "\1\40\1\5\1\0\1\20\1\56\1\43\1\44\1\51\1\50\1\35"+
    "\1\47\1\17\1\52\12\4\1\62\1\36\1\42\1\34\1\41\1\33"+
    "\1\0\32\5\1\21\1\57\1\61\1\0\1\60\1\0\1\14\1\26"+
    "\1\22\1\23\1\12\1\13\1\31\1\5\1\27\2\5\1\15\1\30"+
    "\1\24\1\25\1\53\1\5\1\10\1\16\1\7\1\11\1\54\2\5"+
    "\1\37\1\5\1\45\1\0\1\46\1\0\41\6\2\0\4\5\4\0"+
    "\1\5\2\0\1\6\7\0\1\5\4\0\1\5\4\0\1\32\27\5"+
    "\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5"+
    "\1\0\1\5\21\0\160\6\5\5\1\0\2\5\2\0\4\5\10\0"+
    "\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0"+
    "\213\5\1\0\5\6\2\0\236\5\11\0\46\5\2\0\1\5\7\0"+
    "\47\5\11\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\1\6\10\0\33\5\5\0\3\5\15\0\4\6\7\0\1\5\4\0"+
    "\13\6\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5"+
    "\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5"+
    "\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5"+
    "\13\6\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0"+
    "\26\5\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5"+
    "\3\6\244\0\4\6\66\5\3\6\1\5\22\6\1\5\7\6\12\5"+
    "\2\6\2\0\12\6\1\0\7\5\1\0\7\5\1\0\3\6\1\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0"+
    "\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5"+
    "\10\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\4\5"+
    "\7\0\1\5\5\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6"+
    "\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5"+
    "\1\0\1\5\7\0\14\6\3\5\1\6\13\0\3\6\1\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5"+
    "\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6\1\0\1\5"+
    "\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"+
    "\14\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0"+
    "\1\6\16\0\12\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\7\0\2\6\1\0\2\5\6\0\2\5"+
    "\2\6\2\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0"+
    "\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6\1\0"+
    "\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5\2\6"+
    "\2\0\12\6\1\0\2\5\17\0\2\6\1\0\10\5\1\0\3\5"+
    "\1\0\51\5\2\0\1\5\7\6\1\0\3\6\1\0\4\6\1\5"+
    "\10\0\1\6\10\0\2\5\2\6\2\0\12\6\12\0\6\5\2\0"+
    "\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0"+
    "\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6"+
    "\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0"+
    "\2\5\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\10\5\1\0\44\5\4\0\24\6"+
    "\1\0\2\6\5\5\13\6\1\0\44\6\11\0\1\6\71\0\53\5"+
    "\24\6\1\5\12\6\6\0\6\5\4\6\4\5\3\6\1\5\3\6"+
    "\2\5\7\6\3\5\4\6\15\5\14\6\1\5\17\6\2\0\46\5"+
    "\12\0\53\5\1\0\1\5\3\0\u0149\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5"+
    "\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\6\40\0\20\5"+
    "\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5"+
    "\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5\3\6"+
    "\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6\14\0"+
    "\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6\41\0"+
    "\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6\1\5\5\0"+
    "\106\5\12\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5"+
    "\2\0\5\5\13\0\54\5\4\0\21\6\7\5\2\6\6\0\12\6"+
    "\46\0\27\5\5\6\4\0\65\5\12\6\1\0\35\6\2\0\13\6"+
    "\6\0\12\6\15\0\1\5\130\0\5\6\57\5\21\6\7\5\4\0"+
    "\12\6\21\0\11\6\14\0\3\6\36\5\12\6\3\0\2\5\12\6"+
    "\6\0\46\5\16\6\14\0\44\5\24\6\10\0\12\6\3\0\3\5"+
    "\12\6\44\5\122\0\3\6\1\0\25\6\4\5\1\6\4\5\1\6"+
    "\15\0\300\5\47\6\25\0\4\6\u0116\5\2\0\6\5\2\0\46\5"+
    "\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5"+
    "\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"+
    "\1\0\7\5\16\0\5\6\32\0\5\6\20\0\2\5\23\0\1\5"+
    "\13\0\5\6\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5"+
    "\3\0\32\5\26\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5"+
    "\1\0\205\5\6\0\4\5\3\6\16\0\46\5\12\0\66\5\11\0"+
    "\1\5\17\0\1\6\27\5\11\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\6\1\0"+
    "\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0\3\5\1\0"+
    "\132\5\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0"+
    "\20\5\u0200\0\u19b6\5\112\0\u51cc\5\64\0\u048d\5\103\0\56\5\2\0"+
    "\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5\1\6\14\0\2\6"+
    "\1\0\31\5\10\0\120\5\2\6\45\0\11\5\2\0\147\5\2\0"+
    "\4\5\1\0\2\5\16\0\12\5\120\0\10\5\1\6\3\5\1\6"+
    "\4\5\1\6\27\5\5\6\20\0\1\5\7\0\64\5\14\0\2\6"+
    "\62\5\21\6\13\0\12\6\6\0\22\6\6\5\3\0\1\5\4\0"+
    "\12\6\34\5\10\6\2\0\27\5\15\6\14\0\35\5\3\0\4\6"+
    "\57\5\16\6\16\0\1\5\12\6\46\0\51\5\16\6\11\0\3\5"+
    "\1\6\10\5\2\6\2\0\12\6\6\0\27\5\3\0\1\5\1\6"+
    "\4\0\60\5\1\6\1\5\3\6\2\5\2\6\5\5\2\6\1\5"+
    "\1\6\1\5\30\0\3\5\43\0\6\5\2\0\6\5\2\0\6\5"+
    "\11\0\7\5\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0"+
    "\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u012e\5\2\0"+
    "\76\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\15\5\3\0\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0"+
    "\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0"+
    "\12\6\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0"+
    "\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\6\4\1\5\1\1\1\6"+
    "\3\4\1\7\3\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\35\1\37\1\40\1\35\1\41"+
    "\2\35\1\42\1\35\1\0\6\4\1\43\1\0\1\4"+
    "\1\44\1\45\4\4\1\46\1\47\1\50\3\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\51\1\52\1\53\1\55"+
    "\1\51\1\52\1\53\1\55\1\56\23\4\1\57\4\4"+
    "\1\60\1\4\1\61\11\4\1\62\3\4\1\63\12\4"+
    "\1\64\3\4\1\65\1\4\1\66\6\4\1\67\2\4"+
    "\1\70\1\71\1\4\1\72\1\4\1\73\1\74\1\4"+
    "\1\75\1\76\1\77\2\4\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u0132\0\u02fd\0\u0132\0\u0330\0\u0363\0\u0396\0\u01cb\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0132\0\u0132\0\u0462\0\u0132\0\u0132\0\u01cb"+
    "\0\u0132\0\u0495\0\u04c8\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u04fb\0\u0132\0\u0132\0\u0132\0\u01cb"+
    "\0\u052e\0\u0132\0\u0561\0\u0132\0\u052e\0\u0594\0\u0132\0\u05c7"+
    "\0\u05fa\0\u0132\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u02fd\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u0132\0\u0132\0\u0132\0\u095d\0\u0990"+
    "\0\u09c3\0\u052e\0\u052e\0\u052e\0\u0132\0\u052e\0\u0594\0\u0594"+
    "\0\u0594\0\u0594\0\u05fa\0\u05fa\0\u05fa\0\u05fa\0\u0660\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u01cb\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u01cb"+
    "\0\u0e8b\0\u01cb\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u01cb\0\u1089\0\u10bc\0\u10ef\0\u01cb"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u01cb\0\u1320\0\u1353\0\u1386\0\u01cb\0\u13b9"+
    "\0\u01cb\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u01cb"+
    "\0\u151e\0\u1551\0\u01cb\0\u01cb\0\u1584\0\u01cb\0\u15b7\0\u01cb"+
    "\0\u01cb\0\u15ea\0\u01cb\0\u01cb\0\u01cb\0\u161d\0\u1650\0\u01cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\10\1\12\1\13\1\7\1\14"+
    "\2\13\1\15\1\16\1\17\1\13\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\13\1\55\1\56\1\57\1\60"+
    "\2\7\1\61\2\7\54\61\1\62\2\61\1\63\61\10"+
    "\1\64\1\10\1\61\2\7\54\61\1\7\1\65\1\61"+
    "\1\63\1\66\2\7\52\66\1\67\1\66\1\7\2\66"+
    "\1\70\1\71\2\7\53\71\1\72\1\7\2\71\1\73"+
    "\64\0\1\10\65\0\1\12\12\0\1\74\47\0\13\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\4\13\1\75\6\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\2\13"+
    "\1\76\5\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\10\13\1\77\2\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\4\13\1\100\6\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\6\13\1\101\1\13\1\102\2\13\3\0\5\13"+
    "\1\103\2\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\2\0\1\104\1\10\1\11\60\104\4\0\10\13\1\105"+
    "\2\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\6\13\1\106\4\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\3\13\1\107\1\13\1\110\2\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\3\13\1\111"+
    "\4\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\13\13\3\0\2\13\1\112\5\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\5\13\1\113"+
    "\2\13\5\0\1\13\13\0\2\13\3\0\1\13\36\0"+
    "\1\114\62\0\1\115\62\0\1\116\32\0\4\13\1\117"+
    "\1\120\2\13\1\121\2\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\2\0\1\61\2\0\54\61"+
    "\1\0\4\61\2\0\4\61\1\122\1\123\5\61\1\124"+
    "\40\61\1\125\1\126\2\61\1\66\2\0\52\66\1\0"+
    "\1\66\1\0\4\66\2\0\4\66\1\127\1\130\5\66"+
    "\1\131\36\66\1\0\1\66\1\125\1\132\2\66\1\71"+
    "\2\0\53\71\2\0\4\71\2\0\4\71\1\133\1\134"+
    "\5\71\1\135\37\71\1\0\1\125\1\136\2\71\4\0"+
    "\1\137\62\0\5\13\1\140\5\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\3\13\1\141"+
    "\7\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\11\13\1\142\1\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\4\13\1\143"+
    "\6\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\11\13\1\144\1\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\11\13\1\145"+
    "\1\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\13\13\3\0\2\13\1\146\5\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\4\13\1\147"+
    "\5\13\1\150\3\0\1\13\1\151\6\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\1\152"+
    "\7\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\4\13\1\153\6\13\3\0\10\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\2\13\1\154"+
    "\5\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\13\13\3\0\3\13\1\155\4\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\1\156\7\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\6\13"+
    "\1\157\4\13\3\0\10\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\13\13\3\0\5\13\1\160\2\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\4\13\1\161\3\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\4\13\1\162\6\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\6\13"+
    "\1\163\4\13\3\0\10\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\6\13\1\164\4\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\12\13"+
    "\1\140\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\6\13\1\165\4\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\6\13\1\166"+
    "\4\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\13\13\3\0\5\13\1\167\2\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\3\13\1\170\4\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\10\13\1\171\2\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\3\13\1\172\4\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\6\13\1\173\4\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\5\13\1\174\2\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\13\13\3\0\6\13\1\175\1\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\7\13\1\176\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\11\13\1\177\1\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\11\13\1\200\1\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\13\13\3\0\2\13\1\201\5\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\10\13"+
    "\5\0\1\13\13\0\1\13\1\202\3\0\1\13\6\0"+
    "\11\13\1\203\1\13\3\0\10\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\10\13\1\204\2\13\3\0"+
    "\10\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\4\13\1\205\6\13\3\0\10\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\7\13\1\206"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\1\207\7\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\4\13\1\210\6\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\1\211\7\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\13\13\3\0\2\13\1\212\5\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\6\13"+
    "\1\213\1\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\10\13\1\214\2\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\5\13\1\215\5\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\6\13\1\216\4\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\5\13\1\217\5\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\3\13\1\220\7\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\10\13\1\221\2\13"+
    "\3\0\10\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\13\13\3\0\5\13\1\222\2\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\3\13"+
    "\1\223\4\13\5\0\1\13\13\0\2\13\3\0\1\13"+
    "\6\0\11\13\1\224\1\13\3\0\10\13\5\0\1\13"+
    "\13\0\2\13\3\0\1\13\6\0\13\13\3\0\1\225"+
    "\7\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\3\13\1\226\7\13\3\0\10\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\10\13\1\227\2\13\3\0"+
    "\10\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\10\13\1\230\2\13\3\0\10\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\11\13\1\231\1\13\3\0"+
    "\10\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\13\13\3\0\2\13\1\232\5\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\10\13\1\233\2\13\3\0"+
    "\10\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\13\13\3\0\5\13\1\234\2\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\4\13\1\235\6\13\3\0"+
    "\10\13\5\0\1\13\13\0\2\13\3\0\1\13\6\0"+
    "\13\13\3\0\1\13\1\236\6\13\5\0\1\13\13\0"+
    "\2\13\3\0\1\13\6\0\13\13\3\0\1\237\7\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\3\13\1\240\4\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\13\13\3\0\5\13\1\241\2\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\6\13"+
    "\1\242\4\13\3\0\10\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\11\13\1\243\1\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\3\13\1\244\4\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\13\13\3\0\2\13\1\245\5\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\4\13"+
    "\1\246\6\13\3\0\10\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\10\13\1\247\2\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\10\13"+
    "\1\250\2\13\3\0\10\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\10\13\1\251\2\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\3\13\1\252\4\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\4\13\1\253\6\13\3\0\10\13"+
    "\5\0\1\13\13\0\2\13\3\0\1\13\6\0\13\13"+
    "\3\0\3\13\1\254\4\13\5\0\1\13\13\0\2\13"+
    "\3\0\1\13\6\0\12\13\1\255\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\13\13\3\0"+
    "\2\13\1\256\5\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\6\0\10\13\1\257\2\13\3\0\10\13\5\0"+
    "\1\13\13\0\2\13\3\0\1\13\6\0\4\13\1\260"+
    "\6\13\3\0\10\13\5\0\1\13\13\0\2\13\3\0"+
    "\1\13\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5763];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\10\1\1\11\1\1\1\11\7\1\2\11"+
    "\1\1\2\11\1\1\1\11\2\1\10\11\1\1\3\11"+
    "\2\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\0\7\1\1\0\7\1\3\11\6\1\1\11"+
    "\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /** Errores **/
    LinkedList<Err> errores=new LinkedList<>();
    public LinkedList<Err> getErrores(){
        return errores;
    }
    private void error(String message) {
        Symbol sym = new Symbol(Sym.error, yyline, yycolumn, yytext());
        Err e = new Err(message,sym,Err.TIPO.LEXICO);
        getErrores().add(e);
    }
    /** Symbol **/
 
    private Symbol symbol(int type) {
            return new Symbol(type, yyline, yycolumn,yytext());
    }
    private Symbol symbol(int type, Object value) {
            return new Symbol(type, yyline, yycolumn, value);
    }

    /** String **/
    StringBuilder string=new StringBuilder();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return symbol(Sym.FOR);
          }
        case 65: break;
        case 62: 
          { return symbol(Sym.KW_BOOLEAN);
          }
        case 66: break;
        case 5: 
          { return symbol(Sym.PUNTO);
          }
        case 67: break;
        case 35: 
          { return symbol(Sym.IF);
          }
        case 68: break;
        case 7: 
          { return symbol(Sym.OR);
          }
        case 69: break;
        case 17: 
          { return symbol(Sym.LP);
          }
        case 70: break;
        case 41: 
          { string.append('\t');
          }
        case 71: break;
        case 54: 
          { return symbol(Sym.KW_NORMAL);
          }
        case 72: break;
        case 57: 
          { return symbol(Sym.DEFAULT);
          }
        case 73: break;
        case 48: 
          { return symbol(Sym.ELSEIF);
          }
        case 74: break;
        case 27: 
          { string.setLength(0); yybegin(YYSTRING);
          }
        case 75: break;
        case 52: 
          { return symbol(Sym.KW_INT);
          }
        case 76: break;
        case 20: 
          { return symbol(Sym.RB);
          }
        case 77: break;
        case 12: 
          { return symbol(Sym.PCOMA);
          }
        case 78: break;
        case 40: 
          { return symbol(Sym.LETHAN);
          }
        case 79: break;
        case 55: 
          { return symbol(Sym.KW_ARRAY);
          }
        case 80: break;
        case 8: 
          { return symbol(Sym.OQ);
          }
        case 81: break;
        case 23: 
          { return symbol(Sym.MULTI);
          }
        case 82: break;
        case 4: 
          { return symbol(Sym.ID);
          }
        case 83: break;
        case 44: 
          { string.append('\\');
          }
        case 84: break;
        case 1: 
          { error("Illegal character.");
          }
        case 85: break;
        case 9: 
          { return symbol(Sym.CQ);
          }
        case 86: break;
        case 42: 
          { string.append('\r');
          }
        case 87: break;
        case 45: 
          { string.append('_');
          }
        case 88: break;
        case 31: 
          { yybegin(YYINITIAL);
          }
        case 89: break;
        case 47: 
          { return symbol(Sym.BOOLEAN);
          }
        case 90: break;
        case 36: 
          { return symbol(Sym.KW_OF);
          }
        case 91: break;
        case 39: 
          { return symbol(Sym.BETHAN);
          }
        case 92: break;
        case 33: 
          { yybegin(YYINITIAL);
                    return symbol(Sym.INCLUDE_STRING,string.toString());
          }
        case 93: break;
        case 15: 
          { return symbol(Sym.BTHAN);
          }
        case 94: break;
        case 16: 
          { return symbol(Sym.LTHAN);
          }
        case 95: break;
        case 14: 
          { return symbol(Sym.NEQUAL);
          }
        case 96: break;
        case 25: 
          { string.setLength(0); yybegin(YYINCLUDE_STRING);
          }
        case 97: break;
        case 56: 
          { return symbol(Sym.KW_FLOAT);
          }
        case 98: break;
        case 26: 
          { string.setLength(0); yybegin(YYINCLUDE_CHAR);
          }
        case 99: break;
        case 64: 
          { return symbol(Sym.SELECT);
          }
        case 100: break;
        case 3: 
          { return symbol(Sym.INT);
          }
        case 101: break;
        case 63: 
          { return symbol(Sym.WHILE);
          }
        case 102: break;
        case 53: 
          { return symbol(Sym.KW_STRING);
          }
        case 103: break;
        case 10: 
          { return symbol(Sym.EQUAL);
          }
        case 104: break;
        case 18: 
          { return symbol(Sym.RP);
          }
        case 105: break;
        case 28: 
          { string.setLength(0); yybegin(YYCHAR);
          }
        case 106: break;
        case 37: 
          { return symbol(Sym.NOT);
          }
        case 107: break;
        case 13: 
          { return symbol(Sym.AND);
          }
        case 108: break;
        case 24: 
          { return symbol(Sym.DIV);
          }
        case 109: break;
        case 59: 
          { return symbol(Sym.PRIVATE);
          }
        case 110: break;
        case 34: 
          { yybegin(YYINITIAL);
                    return symbol(Sym.INCLUDE_CHAR,string.toString());
          }
        case 111: break;
        case 43: 
          { string.append('\n');
          }
        case 112: break;
        case 30: 
          { yybegin(YYINITIAL);
                    return symbol(Sym.STRING,string.toString());
          }
        case 113: break;
        case 46: 
          { return symbol(Sym.FLOAT);
          }
        case 114: break;
        case 38: 
          { return symbol(Sym.DEQUAL);
          }
        case 115: break;
        case 51: 
          { return symbol(Sym.EXIT);
          }
        case 116: break;
        case 22: 
          { return symbol(Sym.PLUS);
          }
        case 117: break;
        case 60: 
          { return symbol(Sym.PUBLIC);
          }
        case 118: break;
        case 19: 
          { return symbol(Sym.LB);
          }
        case 119: break;
        case 6: 
          { yybegin(YYCOMMENT);
          }
        case 120: break;
        case 21: 
          { return symbol(Sym.MINUS);
          }
        case 121: break;
        case 32: 
          { int lenght = string.length();
                    switch(lenght){
                        case 0:error("Caracter vacio...");break;
                        case 1:break;
                        default: error("No es un caracter...");
                    }
                    yybegin(YYINITIAL);
                    return symbol(Sym.CHAR,string.toString());
          }
        case 122: break;
        case 49: 
          { return symbol(Sym.CASE);
          }
        case 123: break;
        case 58: 
          { return symbol(Sym.KW_INCLUDE);
          }
        case 124: break;
        case 61: 
          { return symbol(Sym.KW_CHAR);
          }
        case 125: break;
        case 29: 
          { string.append( yytext() );
          }
        case 126: break;
        case 2: 
          { 
          }
        case 127: break;
        case 11: 
          { return symbol(Sym.COMA);
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
