package com.github.lproges.gui;

import com.github.lproges.compiler.Attr;
import com.github.lproges.compiler.Err;
import com.github.lproges.compiler.Nodo;
import com.github.lproges.compiler.Sim;
import com.github.lproges.compiler.es.Parser;
import com.github.lproges.compiler.es.Scanner;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Win extends javax.swing.JFrame {

    /**
     * Creates new form Win
     */
    public Win() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane1 = new com.github.lproges.editor.gui.TabPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        compilerMenu = new javax.swing.JMenu();
        compile3Menu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        compileMenu = new javax.swing.JMenuItem();
        symtableMenu = new javax.swing.JMenuItem();
        errorMenu = new javax.swing.JMenuItem();
        optimizerMenu = new javax.swing.JMenu();
        grafoMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        bloqueMenu = new javax.swing.JMenuItem();
        mirillaMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TextEditor");
        setPreferredSize(new java.awt.Dimension(1024, 600));
        getContentPane().add(tabPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        compilerMenu.setText("Compilador");

        compile3Menu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        compile3Menu.setText("Compile TAC");
        compilerMenu.add(compile3Menu);
        compilerMenu.add(jSeparator1);

        compileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        compileMenu.setText("Compilar");
        compileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMenuActionPerformed(evt);
            }
        });
        compilerMenu.add(compileMenu);

        symtableMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        symtableMenu.setText("MostrarTabla de Simbolos");
        compilerMenu.add(symtableMenu);

        errorMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        errorMenu.setText("Mostrar Errores");
        compilerMenu.add(errorMenu);

        menuBar.add(compilerMenu);

        optimizerMenu.setText("Optimizador");

        grafoMenu.setText("Mostrar Grafo de Flujo");
        optimizerMenu.add(grafoMenu);
        optimizerMenu.add(jSeparator2);

        bloqueMenu.setText("Optimizar por Bloques");
        optimizerMenu.add(bloqueMenu);

        mirillaMenu.setText("Optimizar por Mirilla");
        optimizerMenu.add(mirillaMenu);

        menuBar.add(optimizerMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        try {
            tabPane1.nuevo();
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        try {
            tabPane1.abrir();
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            tabPane1.guardar();
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        try {
            tabPane1.guardarComo();
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void compileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuActionPerformed
        // TODO add your handling code here:
        String text = tabPane1.getText();

        if (text != null && !text.trim().isEmpty()) {
            StringReader input = new StringReader(text);
            Scanner s = new Scanner(input);
            Parser p = new Parser(s);
            try {
                p.parse();
                // procesar el resultado obtenido por el commpilador
                process_result(s, p);
            } catch (Exception ex) {
                Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void process_result(Scanner scanner, Parser parser) {
        // errores
        LinkedList<Err> errores = new LinkedList<>();
        errores.addAll(scanner.getErrores());
        errores.addAll(parser.getErrores());

        if (errores.isEmpty()) {
            // sin errores
            Nodo.CompilerStuff cstuff = getCompilerStuffs();
            HashMap<Object, Nodo.Operation> operaciones = getOperaciones();

            // procesar nodos
            LinkedList<Nodo> nodos = parser.getNodos();
            for (Nodo nodo : nodos) {
                nodo.exec(cstuff, operaciones);
            }
            // procesar resultados del nodo
            Path file = Paths.get("3dir.cpp");
            // limpiar archivo
            write_file(file, "", StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            // escribir texto 3dir generado por cada nodo
            for (Nodo nodo : nodos) {
                Attr nodo_attr = (Attr) nodo.getVal();
                String nodo_tres = nodo_attr.getString("tres");
                write_file(file, nodo_tres, StandardOpenOption.APPEND);
            }
        } else {
            // con errores
            for (Err err : errores) {
                err.println();
            }
        }


    }//GEN-LAST:event_compileMenuActionPerformed

    public void write_file(Path file, String write, OpenOption... ooptions) {
        try {
            Files.write(file, write.getBytes(), ooptions);
        } catch (IOException ex) {
            Logger.getLogger(Win.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Nodo.CompilerStuff getCompilerStuffs() {
        final int[] stack = new int[100];
        final int[] heap = new int[100];
        HashMap<Object, Sim> symtable = new HashMap<>();
        LinkedList<Err> errores = new LinkedList<>();

        Nodo.CompilerStuff cosas_compildor = new Nodo.CompilerStuff(stack, heap, symtable, errores);
        return cosas_compildor;
    }

    public HashMap<Object, Nodo.Operation> getOperaciones() {
        HashMap<Object, Nodo.Operation> operaciones = new HashMap<>();
        // definicion de las operaciones soportadas 
        Nodo.Operation declaracion = new Nodo.Operation("declaracion") {

            @Override
            public void exec(Nodo nodo, Nodo.CompilerStuff compiler, Object operations) {

            }
        };
        Nodo.Operation main = new Nodo.Operation("main") {

            @Override
            public void exec(Nodo nodo, Nodo.CompilerStuff compiler, Object operations) {
                Attr val_attr = new Attr();

                Nodo l = nodo.getLeft();

                String tres = String.format("// METODO PRINCIPAL \n int main(){\n%s\nreturn 0;\n}", "//tres del main");

                val_attr.set("tres", tres);

                nodo.setVal(val_attr);
            }
        };

        Nodo.Operation declaracion_array = new Nodo.Operation("declaracion_array") {

            @Override
            public void exec(Nodo nodo, Nodo.CompilerStuff compiler, Object operations) {
                Attr val = new Attr();
                Attr l_attr = (Attr) nodo.getLeft().getVal();
                Attr tipo_attr = l_attr.getAttr("tipo");
                Attr id_attr = l_attr.getAttr("id");
                ArrayList<Attr> list = l_attr.getList("list");
                
                
                nodo.setVal(val);
            }
        };

        // registro de las operaciones
        operaciones.put(main.getId(), main);
        operaciones.put(declaracion.getId(), declaracion);
        operaciones.put(declaracion_array.getId(), declaracion_array);
        return operaciones;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Win.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final Win win = new Win();
                win.setVisible(true);
                win.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem bloqueMenu;
    private javax.swing.JMenuItem compile3Menu;
    private javax.swing.JMenuItem compileMenu;
    private javax.swing.JMenu compilerMenu;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem errorMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem grafoMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mirillaMenu;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenu optimizerMenu;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem symtableMenu;
    private com.github.lproges.editor.gui.TabPane tabPane1;
    // End of variables declaration//GEN-END:variables

}
